* Packages
** beacon
beacon highlights cursore on switch buffer
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+END_SRC
** org-bullets
org-bullets change bullet style in org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t)
#+END_SRC
** ido-vertical
ido-vertical enables vertical hint on switch buffer/find file/etc.
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** smex
provide ido-like functionality to M-x
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
** Avy
avy is a productivity tool, that helps moving the cursor
by arranging tags all over the visible part of document
by writing this tag you move cursor on it position
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
** rainbow-mode
hl color codes in there colors
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))
#+END_SRC
** switch-window
switch-window helps to handle multiple windows
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increse 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
          '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
** dashboard
show last open projects
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10))))
#+END_SRC
** company
auto-complete engine 
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    :init
    (add-hook 'after-init-hook 'global-company-mode))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous))

  (use-package company-c-headers
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-c-headers))

  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-irony))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))

  (use-package company-go
    :ensure t
    :config
    (add-hook 'go-mode-hook (lambda ()
                              (set (make-local-variable 'company-backends) '(company-go))
                              (company-mode))))



#+END_SRC
** modeline
*** spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-seporator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC
*** diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'beacon-mode)
    (diminish 'subword-mode)
    (diminish 'rainbow-mode)
    (diminish 'which-key-mode))
#+END_SRC
** dmenu
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :ensure t
    :bind
    ("s-SPC" . 'dmenu))
#+END_SRC
** popup-kill-ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind
    ("M-y" . popup-kill-ring))
#+END_SRC
** yasnippet
#+BEGIN_SRC elisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))

  (add-hook 'c++-mode-hook 'yas-minor-mode)
  (add-hook 'c-mode-hook 'yas-minor-mode)

  (defun company-yasnippet-or-completion ()
    (interactive)
    (let ((yas-fallback-behavior nil))
      (unless (yas-expand)
        (call-interactively #'company-complete-common))))

  (add-hook 'company-mode-hook (lambda ()
                                 (substitute-key-definition 'company-complete-common
                                                            'company-yasnippet-or-completion
                                                            company-active-map)))
#+END_SRC
** all-the-icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+END_SRC
** neotree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :config
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    :bind
    ("<f8>" . neotree-toggle)
    )

  (with-eval-after-load 'neotree
    (add-hook 'neotree-mode-hook
              (lambda () (with-current-buffer " *NeoTree*"
                     (setq-local limum-mode nil)))))
#+END_SRC
** exec-path-from-shell
copy env vars
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize)
    (exec-path-from-shell-copy-env "GOPATH")
    (exec-path-from-shell-copy-env "GOROOT")
    (exec-path-from-shell-copy-env "PATH")
    (exec-path-from-shell-copy-env "LD_LIBRARY_PATH"))
#+END_SRC
** go-mode
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t)

  (use-package flymake-go
    :ensure t)

  (defun my-go-mode-hook ()
    (add-hook 'before-save-hook 'gofmt-before-save)
    (setq gofmt-command "goimports")
    (if (not (string-match "go" compile-command))
        (set (make-local-variable 'compile-command)
             "go build -v && go test -v && go vet"))

    (local-set-key (kbd "C-.") 'godef-jump)
    (local-set-key (kbd "C-,") 'pop-tag-mark)
    (local-set-key (kbd "M-p") 'compile)
    (local-set-key (kbd "M-P") 'recompile)
    (local-set-key (kbd "M-]") 'next-error)
    (local-set-key (kbd "M-[") 'previous-error))

  (add-hook 'go-mode-hook 'my-go-mode-hook)
#+END_SRC
#+BEGIN_SRC 

#+END_SRC
** markdown-mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC
** mc
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t)

  (global-set-key (kbd "M-n") 'mc/mark-next-like-this)
  (global-set-key (kbd "M-p") 'mc/mark-previous-like-this)

  (define-key mc/keymap (kbd "<return>") nil)
#+END_SRC
** cpp-font
#+BEGIN_SRC emacs-lisp
  (use-package modern-cpp-font-lock
    :ensure t)

;  (add-hook 'c++-mode-hook #'modern-c++-font-lock-mode)
#+END_SRC
* helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t)

  (use-package helm-gtags
    :ensure t)

  (setq
   helm-gtags-ignore-case t
   helm-gtags-auto-update t
   helm-gtags-use-input-at-cursor t
   helm-gtags-pulse-at-cursor t
   helm-gtags-prefix-key "\C-cg"
   helm-gtags-suggested-key-mapping t
   )

  (add-hook 'dired-mode-hook 'helm-gtags-mode)
  (add-hook 'eshell-mode-hook 'helm-gtags-mode)
  (add-hook 'c-mode-hook 'helm-gtags-mode)
  (add-hook 'c++-mode-hook 'helm-gtags-mode)
  (add-hook 'asm-mode-hook 'helm-gtags-mode)

  (custom-set-variables
   '(helm-gtags-path-style 'relative)
   '(helm-gtags-auto-update t))

  (define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
  (define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
  (define-key helm-gtags-mode-map (kbd "C-.") 'helm-gtags-dwim)
  (define-key helm-gtags-mode-map (kbd "C-,") 'helm-gtags-pop-stack)
  (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
  (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)
#+END_SRC
** iedit
#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :ensure t)

  (define-key global-map (kbd "C-c ;") 'iedit-mode)
#+END_SRC
** projectile
** whitespaces
*** clean-aindent-mode
#+BEGIN_SRC emacs-lisp
  (use-package clean-aindent-mode
    :ensure t)
  (add-hook 'prog-mode-hook 'clean-aindent-mode)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t)

  (projectile-global-mode)
#+END_SRC
*** dtrt-indent
#+BEGIN_SRC emacs-lisp
  (use-package dtrt-indent
    :ensure t)
  (dtrt-indent-mode 1)
#+END_SRC
*** ws-buttler
#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :ensure t)

  (add-hook 'c-mode-common-hook 'ws-butler-mode)
#+END_SRC
* Custom settings
** Org
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
** Terminal
**Setting default shell bash
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
** Backups
#+BEGIN_SRC emacs-lisp
  (setq make-backups-file nil)
  (setq auto-save-defaults nil)
  (setq backup-inhibited t)
  (setq auto-save-list-file-name nil)
#+END_SRC
** IDO
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** parenthesis pair
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\{ . ?\})
                              ))

  (electric-pair-mode t)
#+END_SRC
** kemel case fix
#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
#+END_SRC
** Other
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)

  (setq scroll-conservatively 100)
  (setq ring-bell-function 'ignore)

  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  (setq inhibit-startup-message t)

  (when window-system (global-prettify-symbols-mode t))
  (when window-system (global-hl-line-mode t))

  (setq ibuffer-expert t)

  (global-linum-mode t)
#+END_SRC
** winner-mode
#+BEGIN_SRC emacs-lisp
  (winner-mode)
  (global-set-key (kbd "<f7>") 'winner-undo)
  (global-set-key (kbd "<C-f7>") 'winner-redo)
  (global-set-key (kbd "<f6>") 'delete-other-window)
  (global-set-key (kbd "<C-f6>") 'delete-window)
#+END_SRC
** build-cpp
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") (lambda ()
                                 (interactive)
                                 (setq-local compilation-read-command nil)
                                 (call-interactively 'compile)))
#+END_SRC
* Keybindings
** Buffer fix
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC
* Hooks
** org-bullets
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC
* Custom functions
** Config edit/reload
*** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
*** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** Split window
*** Move cursor to new window
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically) 



#+END_SRC
** word/line utils
#+BEGIN_SRC emacs-lisp
  (defun custom-kill-word ()
    (interactive)
    (backward-word)
    (kill-word 1))

  (defun custom-kill-line ()
    (interactive)
    (move-beginning-of-line 1)
    (kill-line 1))

  (defun custom-copy-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
        (point-at-bol)
        (point-at-eol)))))

  (global-set-key (kbd "M-d") 'custom-kill-word)
  (global-set-key (kbd "C-k") 'custom-kill-line)
  (global-set-key (kbd "M-k") 'custom-copy-line)
      
#+END_SRC
** kill-curr-buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)
#+END_SRC

* env
#+BEGIN_SRC emacs-lisp
  (setenv "GOPATH" "/home/fexolm/GO/workspace/")
  (setenv "GTAGSLIBPATH" "/usr/lib/gcc/x86_64-pc-linux-gnu/7.3.1/include:/usr/local/include:/usr/lib/gcc/x86_64-pc-linux-gnu/7.3.1/include-fixed:/usr/include")
#+END_SRC
* code-style
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "linux"
      c-basic-offset 4)
  (add-hook 'c-mode-common-hook '(lambda () (c-toggle-auto-state 1)))
  (global-set-key (kbd "RET") 'newline-and-indent)
  (add-hook 'prog-mode-hook (lambda () (interactive) (setq show-trailing-whitespace 1)))
  ;; use space to indent by default
  (setq-default indent-tabs-mode nil)
  ;; set appearance of a tab that is represented by 4 spaces
  (setq-default tab-width 4)
  (whitespace-mode)
#+END_SRC
